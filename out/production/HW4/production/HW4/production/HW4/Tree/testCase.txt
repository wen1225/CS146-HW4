        /* 2
        //Empty tree, T(1) = O(1) => height = 0
        BinarySearchTree<Integer> root = new BinarySearchTree<>();
        System.out.println(root.treeHeight());

        //Right-skewed tree of height 5, T(n) = O(n) => height = 5
        root.add(1);
        root.add(2);
        root.add(3);
        root.add(4);
        root.add(5);
        System.out.println(root.treeHeight());
        */

        /* 3
        //Empty tree, T(1) = O(1) => height = 0
        BinarySearchTree<Integer> root = new BinarySearchTree<>();
        System.out.println(root.treeHeight());

        //left tree height = 0, right tree height = 1. Height difference = 1
        //expect true.
        root.add(1);
        root.add(2);

        //left tree height = 0, right tree height = 2. Height difference = 2 > 1,
        //expect false;
        root.add(3);

        System.out.println(root.passedTest(root.root));
        */

        /* 4
        //Empty tree, T(1) = O(1) => height = 0
        BinarySearchTree<Integer> root = new BinarySearchTree<>();

        //complete tree in the making...difference of height in each node is not > 1. So
        // expect allPassed to return true
        root.add(6);
        root.add(3);
        root.add(17);
        root.add(2);
        root.add(5);
        root.add(10);
        root.add(18);
        root.add(1);

        System.out.println(root.passedTest(root.root));
        */

        /* 5
        //Empty tree, T(1) = O(1) => height = 0
        BinarySearchTree<Integer> root = new BinarySearchTree<>();

        root.add(50);
        root.add(12);
        root.add(60);
        root.add(7);
        root.add(30);
        root.add(55);
        root.add(70);
        root.add(4);
        root.add(54);
        root.add(58);
        root.add(100);
        root.add(3);
        root.add(6);
        root.add(2);
        root.add(52);

        //expect tree to be printed in sorted order so:
        // 2 3 4 6 7 12 30 50 52 54 55 58 60 70 100
        root.printInOrder();
        */

        /* 6
        //Empty tree, T(1) = O(1) => height = 0
        BinarySearchTree<Integer> root = new BinarySearchTree<>();

        root.add(50);
        root.add(12);
        root.add(60);
        root.add(7);
        root.add(30);
        root.add(55);
        root.add(70);
        root.add(4);
        root.add(54);
        root.add(58);
        root.add(100);
        root.add(3);
        root.add(6);
        root.add(2);
        root.add(52);

        //expect tree to be printed such order:
        // 2 3 6 4 7 30 12 52 54 58 55 100 70 60 50
        root.printPostOrder();

        */

        /* 7
        //Empty tree, T(1) = O(1) => height = 0
        BinarySearchTree<Integer> root = new BinarySearchTree<>();

        root.add(50);
        root.add(12);
        root.add(60);
        root.add(7);
        root.add(30);
        root.add(55);
        root.add(70);
        root.add(4);
        root.add(54);
        root.add(58);
        root.add(100);
        root.add(3);
        root.add(6);
        root.add(2);
        root.add(52);

        //expect number of nodes to be: 15
        System.out.println(root.numberOfNodes());
        */

        /* 10
        BinarySearchTree<Integer> root = new BinarySearchTree<>();

        root.add(100);
        root.add(50);
        root.add(20);
        root.add(75);
        root.add(200);
        root.add(150);
        root.add(170);
        root.add(250);

        root.printPostOrder();
        root.printPreOrder();
        */